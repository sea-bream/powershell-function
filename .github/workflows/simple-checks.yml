name: Simple Checks
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  basic-validation:
    name: Basic Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check repository structure
        run: |
          echo "üîç Checking repository structure..."
          ls -la
          
          echo "üìÅ Checking for Azure Function files..."
          if [ -d "CryptoDataFunctionApp" ]; then
            echo "‚úÖ Found CryptoDataFunctionApp directory"
            ls -la CryptoDataFunctionApp/
          fi
          
          if [ -d "CryptoDataFunctionApp/CryptoDataFunction" ]; then
            echo "‚úÖ Found CryptoDataFunction directory"
            ls -la CryptoDataFunctionApp/CryptoDataFunction/
          fi

      - name: Validate Azure Function files
        run: |
          echo "üîç Validating Azure Function configuration..."
          
          # Check function.json in the correct location
          if [ -f "CryptoDataFunctionApp/CryptoDataFunction/function.json" ]; then
            if jq empty CryptoDataFunctionApp/CryptoDataFunction/function.json 2>/dev/null; then
              echo "‚úÖ function.json is valid"
            else
              echo "‚ùå function.json is invalid JSON"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è function.json not found in expected location"
          fi
          
          # Check host.json in root
          if [ -f "host.json" ]; then
            if jq empty host.json 2>/dev/null; then
              echo "‚úÖ host.json is valid"
            else
              echo "‚ùå host.json is invalid JSON"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è host.json not found in root"
          fi

      - name: Check PowerShell file
        run: |
          echo "üîç Checking PowerShell files..."
          
          if [ -f "CryptoDataFunctionApp/CryptoDataFunction/run.ps1" ]; then
            echo "‚úÖ Found run.ps1"
            echo "üìä File size: $(wc -c < CryptoDataFunctionApp/CryptoDataFunction/run.ps1) bytes"
            echo "üìä Line count: $(wc -l < CryptoDataFunctionApp/CryptoDataFunction/run.ps1) lines"
          else
            echo "‚ùå run.ps1 not found"
            exit 1
          fi

  test-connectivity:
    name: Test API Connectivity
    runs-on: ubuntu-latest
    steps:
      - name: Test external API
        run: |
          echo "üîç Testing CoinGecko API..."
          
          # Simple ping test
          if curl -s --connect-timeout 10 https://api.coingecko.com/api/v3/ping > /dev/null; then
            echo "‚úÖ CoinGecko API is reachable"
          else
            echo "‚ùå Cannot reach CoinGecko API"
            exit 1
          fi
          
          # Test sample endpoint
          response=$(curl -s -w "%{http_code}" --connect-timeout 10 "https://api.coingecko.com/api/v3/coins/bitcoin?localization=false&market_data=false")
          http_code="${response: -3}"
          
          if [[ "$http_code" == "200" ]]; then
            echo "‚úÖ Sample API call successful"
          else
            echo "‚ùå Sample API call failed (HTTP $http_code)"
            exit 1
          fi

  security-basics:
    name: Basic Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for common issues
        run: |
          echo "üîç Basic security checks..."
          
          # Check for potentially sensitive files
          sensitive_found=false
          
          if find . -name "*.key" -o -name "*.pem" -o -name "*.p12" | grep -q .; then
            echo "‚ö†Ô∏è Found potential key files"
            find . -name "*.key" -o -name "*.pem" -o -name "*.p12"
            sensitive_found=true
          fi
          
          if find . -name ".env*" | grep -q .; then
            echo "‚ö†Ô∏è Found .env files"
            find . -name ".env*"
            sensitive_found=true
          fi
          
          if [ "$sensitive_found" = false ]; then
            echo "‚úÖ No obvious sensitive files found"
          else
            echo "‚ö†Ô∏è Please review the files above"
          fi
          
          echo "‚úÖ Basic security check completed"